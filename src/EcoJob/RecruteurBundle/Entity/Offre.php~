<?php

namespace EcoJob\RecruteurBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use FOS\ElasticaBundle\Configuration\Search;
use JMS\Serializer\Annotation\Exclude;
use Doctrine\ORM\Mapping\Index;
/**
 * Offre
 * @Search(repositoryClass="EcoJob\RecruteurBundle\Entity\SearchRepository\OffreRepository")
 * @ORM\Table(name="offre",indexes={
 *     @Index(name="titre_idx", columns={"titre"}),
 *     @Index(name="description_idx", columns={"description"}),
 *     @Index(name="prerequis_idx", columns={"prerequis"}),
 *     @Index(name="societe_idx", columns={"societe"}),
 *     @Index(name="descsociete_idx", columns={"descSociete"})
 * })
 * @ORM\Entity(repositoryClass="EcoJob\RecruteurBundle\Repository\OffreRepository")
 */
class Offre
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="titre", type="string", length=500)
     * @Assert\NotBlank()          
     */
    private $titre;

    /**
     * @var string
     *
     * @ORM\Column(name="reference", type="string", length=255,nullable=true)         
     */
    private $reference;
    /**
     * @var string
     *
     * @ORM\Column(name="niveauDiplome", type="string", length=255)
     * @Assert\NotBlank()          
     */
    private $niveauDiplome;
    
    /**
     * @ORM\OneToOne(targetEntity="EcoJob\UserBundle\Entity\Image",cascade={"remove"},orphanRemoval=true)
     * @Exclude     
     */
    private $logo;

    /**
     * @var string
     *
     * @ORM\Column(name="langues", type="string", length=255,nullable=false)
     * @Assert\NotBlank()           
     */
    private $langues;    
    /**
     * @var string
     *
     * @ORM\Column(name="description", type="string", length=1000)
     * @Assert\NotBlank()          
     */
    private $description;
    
    /**
     * @var string
     *
     * @ORM\Column(name="prerequis", type="string", length=1000)
     * @Assert\NotBlank()          
     */
    private $prerequis;  
    
    /**
     * @var string
     *
     * @ORM\Column(name="societe", type="string", length=20)
     * @Assert\NotBlank()          
     */
    private $societe;    

    /**
     * @var string
     *
     * @ORM\Column(name="descSociete", type="string", length=1000)
     * @Assert\NotBlank()          
     */
    private $descSociete;        
    
    /**
     * @var string
     *
     * @ORM\Column(name="avantages", type="string", length=1000,nullable=true)
     * @Assert\NotBlank()          
     */
    private $avantages;      

    private $duree;        


    /**
    * @ORM\ManyToOne(targetEntity="EcoJob\RecruteurBundle\Entity\ContratType",inversedBy="offres")
    * @ORM\JoinColumn(nullable=false,onDelete="CASCADE")
    * @Exclude 
    */      
    private $contrat;  
    
    /**
    * @ORM\ManyToOne(targetEntity="EcoJob\CandidatBundle\Entity\TypeRemuneration",inversedBy="offres")
    * @ORM\JoinColumn(nullable=false,onDelete="CASCADE")
    * @Exclude 
    */      
    private $remuneration;    
    
    /**
    * @ORM\ManyToOne(targetEntity="EcoJob\UserBundle\Entity\User",inversedBy="offres")
    * @ORM\JoinColumn(nullable=false,onDelete="CASCADE")
    * @Exclude    
    */    
    private $recruteur;

    /**
    * @ORM\ManyToOne(targetEntity="EcoJob\RecruteurBundle\Entity\Experience",inversedBy="offres")
    * @ORM\JoinColumn(nullable=false,onDelete="CASCADE")
    * @Exclude    
    */    
    private $experience;    
    
    /**
     * @var bool
     *
     * @ORM\Column(name="valid", type="boolean",options={"default": false},nullable=false)
     */
    private $valid;    

    
     /**
     * @var bool
     *
     * @ORM\Column(name="suspendu", type="boolean",options={"default": false},nullable=false)
     */
    private $suspendu;  
    
     /**
     * @var bool
     *
     * @ORM\Column(name="modification_valided", type="boolean",options={"default": true},nullable=false)
     */
    private $modificationValided;     
    
    private $added;
    
      /**
     * @var bool
     */
    private $expired;
    /**
     * @var int
     *
     * @ORM\Column(name="latitude", type="float")
     */    
    private $latitude;
    /**
     * @var int
     *
     * @ORM\Column(name="longitude", type="float")
     * @Assert\NotNull(message = "Veuillez choisir la localisation parmi les propositions fournies par Google")
     */    
    private $longitude;
    /**
     * @var string
     *
     * @ORM\Column(name="localisation", type="string", length=255)
     * @Assert\NotBlank()          
     */    
    private $localisation;

    /**
     * @ORM\OneToMany(targetEntity="EcoJob\CandidatBundle\Entity\Candidature",
     *     mappedBy="offre", fetch="EXTRA_LAZY",cascade={"remove"})
     */
    private $candidatures;

    /**
     * @ORM\Column(type="datetime",nullable=true)
     *
     * @var \DateTime
     */
    private $createdAt; 
     /**
     * @var int
     *
     * @ORM\Column(type="integer",nullable=true,options={"default": 90})
     */
    private $expireAt;
     /**
    * @ORM\ManyToOne(targetEntity="EcoJob\RecruteurBundle\Entity\ContratCategorie",inversedBy="offres")
    * @ORM\JoinColumn(nullable=false)
    * @Exclude 
    */   
    private $categorie;  
    
      /**
     * @ORM\Column(type="datetime",nullable=true)
     *
     * @var \DateTime
     */
    private $validAt;
    

    
      /**
     * @ORM\Column(type="datetime",nullable=true)
     *
     * @var \DateTime
     */
    private $suspenduAt;
    
    public function __construct()
    {
      $this->valid = false;
      $this->createdAt = new \DateTime();
      $this->suspendu = false;
      $this->validAt = NULL;
    } 

    /**
     * Get updatedAt
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }    

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     *
     * @return User
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;

        return $this;
    }    
    
    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set titre
     *
     * @param string $titre
     *
     * @return Offre
     */
    public function setTitre($titre)
    {
        $this->titre = $titre;

        return $this;
    }

    /**
     * Get titre
     *
     * @return string
     */
    public function getTitre()
    {
        return $this->titre;
    }

    /**
     * Set contenu
     *
     * @param string $contenu
     *
     * @return Offre
     */
    public function setContenu($contenu)
    {
        $this->contenu = $contenu;

        return $this;
    }

    /**
     * Get contenu
     *
     * @return string
     */
    public function getContenu()
    {
        return $this->contenu;
    }

    /**
     * Set contrat
     *
     * @param \EcoJob\RecruteurBundle\Entity\Contrat $contrat
     *
     * @return Offre
     */
    public function setContrat(\EcoJob\RecruteurBundle\Entity\ContratType $contrat = null)
    {
        $this->contrat = $contrat;

        return $this;
    }

    /**
     * Get contrat
     *
     * @return \EcoJob\RecruteurBundle\Entity\Contrat
     */
    public function getContrat()
    {
        return $this->contrat;
    }



    /**
     * Set recruteur
     *
     * @param \EcoJob\UserBundle\Entity\User $recruteur
     *
     * @return Offre
     */
    public function setRecruteur(\EcoJob\UserBundle\Entity\User $recruteur)
    {
        $this->recruteur = $recruteur;

        return $this;
    }

    /**
     * Get recruteur
     *
     * @return \EcoJob\UserBundle\Entity\User
     */
    public function getRecruteur()
    {
        return $this->recruteur;
    }


    /**
     * Set valid
     *
     * @param boolean $valid
     *
     * @return Offre
     */
    public function setValid($valid)
    {
        $this->valid = $valid;

        return $this;
    }

    /**
     * Get valid
     *
     * @return boolean
     */
    public function getValid()
    {
        return $this->valid;
    }
    public function setAdded($added)
    {
        $this->added = $added;

        return $this;
    }

    /**
     * Get valid
     *
     * @return boolean
     */
    public function getAdded()
    {
        return $this->added;
    }    

    /**
     * Set latitude
     *
     * @param integer $latitude
     *
     * @return Offre
     */
    public function setLatitude($latitude)
    {
        $this->latitude = $latitude;

        return $this;
    }

    /**
     * Get latitude
     *
     * @return integer
     */
    public function getLatitude()
    {
        return $this->latitude;
    }

    /**
     * Set longitude
     *
     * @param integer $longitude
     *
     * @return Offre
     */
    public function setLongitude($longitude)
    {
        $this->longitude = $longitude;

        return $this;
    }

    /**
     * Get longitude
     *
     * @return integer
     */
    public function getLongitude()
    {
        return $this->longitude;
    }

    /**
     * Set localisation
     *
     * @param string $localisation
     *
     * @return Offre
     */
    public function setLocalisation($localisation)
    {
        $this->localisation = $localisation;

        return $this;
    }

    /**
     * Get localisation
     *
     * @return string
     */
    public function getLocalisation()
    {
        return $this->localisation;
    }


    /**
     * Add candidature
     *
     * @param \EcoJob\CandidatBundle\Entity\Candidature $candidature
     *
     * @return Offre
     */
    public function addCandidature(\EcoJob\CandidatBundle\Entity\Candidature $candidature)
    {
        $this->candidatures[] = $candidature;
    }

    /**
     * Set suspendu
     *
     * @param boolean $suspendu
     *
     * @return Offre
     */
    public function setSuspendu($suspendu)
    {
        $this->suspendu = $suspendu;
    
        return $this;
    }

    /**
     * Get suspendu
     *
     * @return boolean
     */
    public function getSuspendu()
    {
        return $this->suspendu;
    }

    /**
     * Set expireAt
     *
     * @param integer $expireAt
     *
     * @return Offre
     */
    public function setExpireAt($expireAt)
    {
        $this->expireAt = $expireAt;
        return $this;
    }

    /**
     * Remove candidature
     *
     * @param \EcoJob\CandidatBundle\Entity\Candidature $candidature
     */
    public function removeCandidature(\EcoJob\CandidatBundle\Entity\Candidature $candidature)
    {
        $this->candidatures->removeElement($candidature);
    }

    /**
     * Get candidatures
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCandidatures()
    {
        return $this->candidatures;
    }
     /* Get expireAt
     *
     * @return integer
     */
    public function getExpireAt()
    {
        return $this->expireAt;
    }

    /**
     * Set categorie
     *
     * @param \EcoJob\RecruteurBundle\Entity\ContratCategorie $categorie
     *
     * @return Offre
     */
    public function setCategorie(\EcoJob\RecruteurBundle\Entity\ContratCategorie $categorie)
    {
        $this->categorie = $categorie;
    
        return $this;
    }

    /**
     * Get categorie
     *
     * @return \EcoJob\RecruteurBundle\Entity\ContratCategorie
     */
    public function getCategorie()
    {
        return $this->categorie;
    }
    
    public function setExpired($expired)
    {
        $this->expired = $expired;
        return $this;
    }

    /**
     * Get expired
     *
     * @return boolean
     */
    public function getExpired()
    {
        $now = date_format(new \DateTime(), 'Y-m-d');
        
        if($this->getValidAt() != null && $this->getExpireAt() != null){
            $date_limit = date_format(date_add($this->getValidAt(), new \DateInterval('P'.$this->getExpireAt().'D')), 'Y-m-d');
            $this->expired = (strtotime($date_limit) - strtotime($now) < 0 );
        }else{
            $this->expired = false;
        }
            
        return $this->expired;
    }  

    /**
     * Set validAt
     *
     * @param \DateTime $validAt
     *
     * @return Offre
     */
    public function setValidAt($validAt)
    {
        $this->validAt = $validAt;
        return $this;
    }

    /**
     * Get validAt
     *
     * @return \DateTime
     */
    public function getValidAt()
    {
        return $this->validAt;
    }


    /**
     * Set modificationValided
     *
     * @param boolean $modificationValided
     *
     * @return Offre
     */
    public function setModificationValided($modificationValided)
    {
        $this->modificationValided = $modificationValided;
    
        return $this;
    }

    /**
     * Get modificationValided
     *
     * @return boolean
     */
    public function getModificationValided()
    {
        return $this->modificationValided;
    }

    /**
     * Set suspenduAt
     *
     * @param \DateTime $suspenduAt
     *
     * @return Offre
     */
    public function setSuspenduAt($suspenduAt)
    {
        $this->suspenduAt = $suspenduAt;
    
        return $this;
    }

    /**
     * Get suspenduAt
     *
     * @return \DateTime
     */
    public function getSuspenduAt()
    {
        return $this->suspenduAt;
    }

    /**
     * Set reference
     *
     * @param string $reference
     *
     * @return Offre
     */
    public function setReference($reference)
    {
        $this->reference = $reference;
    
        return $this;
    }

    /**
     * Get reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return Offre
     */
    public function setDescription($description)
    {
        $this->description = $description;
    
        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set prerequis
     *
     * @param string $prerequis
     *
     * @return Offre
     */
    public function setPrerequis($prerequis)
    {
        $this->prerequis = $prerequis;
    
        return $this;
    }

    /**
     * Get prerequis
     *
     * @return string
     */
    public function getPrerequis()
    {
        return $this->prerequis;
    }

    /**
     * Set societe
     *
     * @param string $societe
     *
     * @return Offre
     */
    public function setSociete($societe)
    {
        $this->societe = $societe;
    
        return $this;
    }

    /**
     * Get societe
     *
     * @return string
     */
    public function getSociete()
    {
        return $this->societe;
    }

    /**
     * Set descSociete
     *
     * @param string $descSociete
     *
     * @return Offre
     */
    public function setDescSociete($descSociete)
    {
        $this->descSociete = $descSociete;
    
        return $this;
    }

    /**
     * Get descSociete
     *
     * @return string
     */
    public function getDescSociete()
    {
        return $this->descSociete;
    }

    /**
     * Set duree
     *
     * @param string $duree
     *
     * @return Offre
     */
    public function setDuree($duree)
    {
        $this->duree = $duree;
    
        return $this;
    }

    /**
     * Get duree
     *
     * @return string
     */
    public function getDuree()
    {
        return $this->duree;
    }

    /**
     * Set limit
     *
     * @param \DateTime $limit
     *
     * @return Offre
     */
    public function setLimit($limit)
    {
        $this->limit = $limit;
    
        return $this;
    }

    /**
     * Get limit
     *
     * @return \DateTime
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * Set experience
     *
     * @param \EcoJob\RecruteurBundle\Entity\Experience $experience
     *
     * @return Offre
     */
    public function setExperience(\EcoJob\RecruteurBundle\Entity\Experience $experience)
    {
        $this->experience = $experience;
    
        return $this;
    }

    /**
     * Get experience
     *
     * @return \EcoJob\RecruteurBundle\Entity\Experience
     */
    public function getExperience()
    {
        return $this->experience;
    }
}
